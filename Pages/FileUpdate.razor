@page "/fileupdate/{StreamId}"
@attribute [Authorize(Policy = "RequireAdminRole")]

@using DocumentStore.Data
@using DocumentStore.Enums
@using DocumentStore.Models
@using DocumentStore.Utilities
@using Serilog
@using System.Diagnostics
@using System.IO
@inject IJSRuntime js
@inject FileStoreService FileStoreService

<h1>Update File</h1>

@if (isLoading)
{
    @*Loading Spinner*@
    <div id="overlay">
        <div class="d-flex flex-column align-items-center justify-content-center">
            <div class="row">
                <div class="spinner-border text-warning" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="row">
                <strong>@loadingText</strong>
            </div>
        </div>
    </div>
}

<EditForm Model="@newFileDescription" OnValidSubmit="@UpdateFile" class="was-validated mt-4">
    <fieldset>
        <div class="mb-3">
            <div class="input-group">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="oldfile">File to be Updated</label>
                </div>
                <InputText class="form-control-plaintext pl-2" name="oldfile" id="oldfile" readonly @bind-Value="@oldFileDescription.FileName"></InputText>
            </div>
        </div>
        <div class="mb-3">
            <div class="input-group">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="description">Description</label>
                </div>
                <InputTextArea rows="3" class="form-control" name="description" id="description" @bind-Value="newFileDescription.Description" placeholder="Enter a new description (optional)"></InputTextArea>
            </div>
        </div>
        <div class="form-group">
            <div class="custom-file">
                <InputFile OnChange="@OnInputFileChange" class="custom-file-input" id="fileupload" required />
                <label for="fileupload" class="custom-file-label">@fileUploadLabel</label>
                <div class="invalid-feedback">Please choose a new file.</div>
            </div>
        </div>
        <button type="submit" value="Update" id="updateButton" class="btn btn-primary">Update</button>
    </fieldset>
</EditForm>

@code {
    [Parameter]
    public string StreamId { get; set; }

    private FileDescription newFileDescription = new FileDescription();
    private FileDescription oldFileDescription = new FileDescription();
    private IBrowserFile uploadFile;
    private string fileUploadLabel = "Choose new file (max 5 MB)";
    private bool isLoading = false;
    private string loadingText = "";

    protected override async Task OnInitializedAsync()
    {
        // Get the old file description.
        oldFileDescription = await FileStoreService.GetSingleFileDescriptionAsync(Guid.Parse(StreamId));

        // Set the description of the updated file. This will be shown to the user and enable the user to keep the description unchanged.
        newFileDescription.Description = oldFileDescription.Description;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        uploadFile = e.File;
        newFileDescription.FileName = e.File.Name;
        fileUploadLabel = e.File.Name;
    }

    public async Task UpdateFile()
    {
        string fileName = uploadFile.Name;
        string userNotificationTitle = "Unable to Upload";
        string userNotificationMessage = "Please try again or contact I.T. Support.";
        string userNotificationIcon = "error";

        isLoading = true;

        // Populate new file description.
        newFileDescription.StreamId = oldFileDescription.StreamId;
        newFileDescription.SectionId = oldFileDescription.SectionId;

        try
        {
            // Update only if files have the same name and extension.
            if (oldFileDescription.FileName == uploadFile.Name)
            {
                loadingText = "Validating and updating file";

                // Upload to filetable using extension method SaveAsAsync() in FormFileExtensions.cs.
                var fileVerificationResult = await uploadFile.SaveAsAsync(fileName, FileMode.Create);

                // Check passed and file saved.
                if (fileVerificationResult == FileVerificationResult.Passed)
                {
                    // Update the file description.
                    await FileStoreService.UpdateFileDescriptionAsync(newFileDescription);

                    userNotificationTitle = "Update Sucessful!";
                    userNotificationMessage = String.Concat(@"""", fileName, @""" was updated successfully.");
                    userNotificationIcon = "success";
                }
                // Check failed.
                else if (fileVerificationResult == FileVerificationResult.FileNotFound)
                {
                    userNotificationMessage = "Please choose a new file to be replace the old one.";
                }
                else if (fileVerificationResult == FileVerificationResult.TypeCheckFailed)
                {
                    userNotificationMessage = "The file type is not an accepted type:\n .doc .docx .pdf .ppt .pptx .png .jpg .jpeg .xls .xlsx\n\nIf your file extension is on this list please contact I.T. Support.";
                }
                else if (fileVerificationResult == FileVerificationResult.VirusScanFailed)
                {
                    userNotificationMessage = "The selected file has failed the virus scan.\nPlease upload a different file.";
                }
                else if (fileVerificationResult == FileVerificationResult.InvalidCharacters)
                {
                    userNotificationMessage = String.Concat("Your file name contains one or more of the following invalid characters ", String.Join(" ", Path.GetInvalidFileNameChars()));
                }
                else if (fileVerificationResult == FileVerificationResult.ReservedWords)
                {
                    userNotificationMessage = String.Concat("Your file name contains one or more of the following reserved words: ", String.Join(", ", ReservedWords.WordList));
                }
                else
                {
                    userNotificationMessage = String.Concat("The file type check and virus scan could not be completed.\nPlease try again or contact I.T. Support.");
                }
            }
            else
            {
                userNotificationMessage = "The file names and extensions do not match.\nIf you need to upload a different file to replace this one, please delete and use the 'File Upload' function.";
            }
        }
        catch (IOException e)
        {
            userNotificationMessage = "Please ensure that your file does not exceed 5MB.\nIf it is under the limit and you still get this erros, please contact I.T. Support.";
            Log.Error(String.Concat(e.Message, "\n", e.StackTrace, "\n", e.InnerException));
        }
        catch (ArgumentNullException e)
        {
            userNotificationMessage = "The file chosen is empty.";
            Log.Error(String.Concat(e.Message, "\n", e.StackTrace, "\n", e.InnerException));
        }
        catch (Exception e)
        {
            Log.Error(String.Concat(e.Message, "\n", e.StackTrace, "\n", e.InnerException));
        }
        finally
        {
            string tempFilePath = Path.Combine(@"D:\Fernando\Documents", fileName);

            // Delete temp file, if it still exists.
            if (File.Exists(tempFilePath))
            {
                File.Delete(tempFilePath);
            }

            // Notify user of result.
            await js.InvokeAsync<object>("swal", userNotificationTitle, userNotificationMessage, userNotificationIcon);

            isLoading = false;
        }
    }
}
